{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "168e1167",
   "metadata": {},
   "source": [
    "## Ideal Curves\n",
    "\n",
    "Ideal curves, sometimes known as characteristic curves or Brown's curves in the literature, are a test of the extrapolation behavior of an EOS. These curves are defined as level set functions of a derivative, so some sort of tracing method is needed to obtain the curve. One possible method is that employed in CoolProp where a polar tracing method locks onto the curve and integrates it until termination is requested.\n",
    "\n",
    "Ideal Curve:\n",
    "\n",
    "$$ Z=1 $$\n",
    "\n",
    "Boyle Curve:\n",
    "\n",
    "$$\n",
    "\\left.\\frac{\\partial Z}{\\partial v}\\right|_{T} = 0\n",
    "$$\n",
    "\n",
    "Joule-Inversion:\n",
    "\n",
    "$$\n",
    "\\left.\\frac{\\partial Z}{\\partial T}\\right|_{v} = 0\n",
    "$$\n",
    "\n",
    "Joule-Thomson:\n",
    "\n",
    "$$\n",
    "\\left.\\frac{\\partial Z}{\\partial T}\\right|_{p} = 0\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "56f76494",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-12T18:10:53.195933Z",
     "iopub.status.busy": "2024-12-12T18:10:53.195767Z",
     "iopub.status.idle": "2024-12-12T18:10:53.689620Z",
     "shell.execute_reply": "2024-12-12T18:10:53.689025Z"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import CoolProp, scipy.optimize\n",
    "CP = CoolProp.CoolProp\n",
    "import teqp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a446343e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-12T18:10:53.691913Z",
     "iopub.status.busy": "2024-12-12T18:10:53.691568Z",
     "iopub.status.idle": "2024-12-12T18:10:53.709932Z",
     "shell.execute_reply": "2024-12-12T18:10:53.709420Z"
    }
   },
   "outputs": [],
   "source": [
    "# Some helper classes\n",
    "\n",
    "class teqpAbstractStateShim(object):\n",
    "    \"\"\"\n",
    "    A shim class that exposes a CoolProp-compatible interface\n",
    "    so that the tracing can use either teqp or CoolProp\n",
    "    \"\"\"\n",
    "    def __init__(self, j):\n",
    "        \"\"\"\n",
    "        \"\"\"\n",
    "        self.model = teqp.make_model(j)\n",
    "        self.z = np.array([1.0])\n",
    "        self.R = self.gas_constant()\n",
    "\n",
    "    def update(self, pair, in1, in2, guess=None):\n",
    "        if pair == CP.PT_INPUTS:\n",
    "            self.p_ = in1\n",
    "            self.T_ = in2\n",
    "            # Assume to be ideal gas\n",
    "            if not guess:\n",
    "                rho_guess = self.p_/(self.R*self.T_)\n",
    "                rho = rho_guess\n",
    "            else:\n",
    "                rho = guess\n",
    "            for i in range(10):\n",
    "                # Iterate for density a few times\n",
    "                Ar0n = self.model.get_Ar02n(self.T_, rho, self.z)\n",
    "                Ar01 = Ar0n[1]; Ar02 = Ar0n[2]\n",
    "                pEOS = rho*self.R*self.T_*(1+Ar01)\n",
    "                dpdrho = self.R*self.T_*(1 + 2*Ar01 + Ar02)\n",
    "                res = (pEOS-self.p_)/self.p_\n",
    "                dresdrho = dpdrho/self.p_\n",
    "                change = -res/dresdrho\n",
    "                if abs(change/rho-1) < 1e-10 or abs(res) < 1e-12:\n",
    "                    break\n",
    "                rho += change\n",
    "            self.rhomolar_ = rho\n",
    "        else:\n",
    "            raise ValueError(\"????\")\n",
    "        \n",
    "    def update_with_guesses(self, pair, val1, val2, guesses):\n",
    "        return self.update(pair, val1, val2, guesses.rhomolar)\n",
    "    \n",
    "    def keyed_output(self, key):\n",
    "        if key == CP.iT:\n",
    "            return self.T_\n",
    "        elif key == CoolProp.iZ:\n",
    "            return self.p_/(self.rhomolar_*self.R*self.T_)\n",
    "        elif key == CoolProp.iT_triple:\n",
    "            return 80\n",
    "        elif key == CoolProp.iP_critical:\n",
    "            return 6e6\n",
    "        else:\n",
    "            raise KeyError(key)\n",
    "\n",
    "    def gas_constant(self, ):\n",
    "        return self.model.get_R(self.z)\n",
    "    \n",
    "    def p(self):\n",
    "        return self.p_\n",
    "    \n",
    "    def T(self):\n",
    "        return self.T_\n",
    "    \n",
    "    def rhomolar(self):\n",
    "        return self.rhomolar_\n",
    "    \n",
    "    def first_partial_deriv(self, k1, k2, k3):\n",
    "        keys = (k1, k2, k3)\n",
    "        if keys == (CoolProp.iDmolar, CoolProp.iT, CoolProp.iP):\n",
    "            return -self.first_partial_deriv(CP.iP, CP.iT, CP.iDmolar)/self.first_partial_deriv(CP.iP, CP.iDmolar, CP.iT)\n",
    "        elif keys ==  (CoolProp.iP, CoolProp.iDmolar, CoolProp.iT):\n",
    "            Ar0n = self.model.get_Ar02n(self.T_, self.rhomolar_, self.z)\n",
    "            Ar01 = Ar0n[1]; Ar02 = Ar0n[2]\n",
    "            dpdrho_T = self.R*self.T_*(1 + 2*Ar01 + Ar02)\n",
    "            return dpdrho_T\n",
    "        elif keys ==  (CoolProp.iP, CoolProp.iT, CoolProp.iDmolar):\n",
    "            Ar01 = self.model.get_Ar01(self.T_, self.rhomolar_, self.z)\n",
    "            Ar11 = self.model.get_Ar11(self.T_, self.rhomolar_, self.z)\n",
    "            dpdT_rho = self.R*self.rhomolar_*(1 + Ar01 - Ar11)\n",
    "            return dpdT_rho\n",
    "        else:\n",
    "            raise KeyError(keys)\n",
    "\n",
    "# This approach was taken from CoolProp\n",
    "class AbstractCurveTracer(object):\n",
    "\n",
    "    def __init__(self, *, AS, p0, T0):\n",
    "        \"\"\"\n",
    "        p0 : Initial pressure [Pa]\n",
    "        \n",
    "        \"\"\"\n",
    "        self.P = [p0]\n",
    "        self.T = []\n",
    "        self.RHO = []\n",
    "        self.AS = AS\n",
    "\n",
    "        # Solve for Temperature for first point\n",
    "        T_ = scipy.optimize.newton(self.objective_T, T0, args = (p0, -1))\n",
    "        print(T_)\n",
    "\n",
    "        self.T.append(T_)\n",
    "\n",
    "    def objective_T(self, T, p, rho_guess):\n",
    "        \"\"\" Base class function \"\"\"\n",
    "        if rho_guess < 0:\n",
    "            self.AS.update(CoolProp.PT_INPUTS, p, T)\n",
    "        else:\n",
    "            guesses = CoolProp.CoolProp.PyGuessesStructure()\n",
    "            guesses.rhomolar = rho_guess\n",
    "            self.AS.update_with_guesses(CoolProp.PT_INPUTS, p, T, guesses)\n",
    "        return self.objective()\n",
    "\n",
    "    def TPcoords(self, t, lnT, lnp, rlnT = 0.1, rlnp = 0.1):\n",
    "        return np.exp(lnT + rlnT*np.cos(t)), np.exp(lnp + rlnp*np.sin(t))\n",
    "\n",
    "    def obj_circle(self, t, lnT, lnp):\n",
    "        T2, P2 = self.TPcoords(t, lnT, lnp)\n",
    "        if len(self.RHO) > 0:\n",
    "            guesses = CoolProp.CoolProp.PyGuessesStructure()\n",
    "            guesses.rhomolar = self.RHO[-1]\n",
    "            self.AS.update_with_guesses(CoolProp.PT_INPUTS, P2, T2, guesses)\n",
    "        else:\n",
    "            self.AS.update(CoolProp.PT_INPUTS, P2, T2)\n",
    "        r = self.objective()\n",
    "        return r\n",
    "\n",
    "    def trace(self):\n",
    "        t = self.starting_direction()\n",
    "        for i in range(1000):\n",
    "            try:\n",
    "                lnT = np.log(self.T[-1])\n",
    "                lnp = np.log(self.P[-1])\n",
    "                t = scipy.optimize.brentq(self.obj_circle, t-np.pi/2, t+np.pi/2, args = (lnT, lnp))\n",
    "                T2, P2 = self.TPcoords(t, lnT, lnp)\n",
    "                self.T.append(T2)\n",
    "                self.P.append(P2)\n",
    "                self.RHO.append(self.AS.rhomolar())\n",
    "                if self.T[-1] < self.AS.keyed_output(CoolProp.iT_triple) or self.P[-1] > 1000*self.AS.keyed_output(CoolProp.iP_critical):\n",
    "                    break\n",
    "            except ValueError as VE:\n",
    "                print(VE)\n",
    "                break\n",
    "\n",
    "        return self.T, self.P\n",
    "\n",
    "class IdealCurveTracer(AbstractCurveTracer):\n",
    "    def __init__(self, *args, **kwargs):\n",
    "        AbstractCurveTracer.__init__(self, *args, **kwargs)\n",
    "\n",
    "    def objective(self):\n",
    "        \"\"\" Z = 1 \"\"\"\n",
    "        return self.AS.keyed_output(CoolProp.iZ) - 1\n",
    "\n",
    "    def starting_direction(self):\n",
    "        \"\"\" Start searching directly up ( or calculate as orthogonal to gradient ) \"\"\"\n",
    "        return np.pi/2.0\n",
    "\n",
    "class BoyleCurveTracer(AbstractCurveTracer):\n",
    "    def __init__(self, *args, **kwargs):\n",
    "        AbstractCurveTracer.__init__(self, *args, **kwargs)\n",
    "\n",
    "    def objective(self):\n",
    "        \"\"\" dZ/dv|T = 0 \"\"\"\n",
    "        r = (self.AS.p() - self.AS.rhomolar()*self.AS.first_partial_deriv(CoolProp.iP, CoolProp.iDmolar, CoolProp.iT))/(self.AS.gas_constant()*self.AS.T())\n",
    "        #print self.AS.T(), self.AS.p(), r\n",
    "        return r\n",
    "\n",
    "    def starting_direction(self):\n",
    "        \"\"\" Start searching directly up \"\"\"\n",
    "        return np.pi/2.0\n",
    "\n",
    "class JouleInversionCurveTracer(AbstractCurveTracer):\n",
    "    def __init__(self, *args, **kwargs):\n",
    "        AbstractCurveTracer.__init__(self, *args, **kwargs)\n",
    "\n",
    "    def objective(self):\n",
    "        \"\"\" dZ/dT|v = 0 \"\"\"\n",
    "        r = (self.AS.gas_constant()*self.AS.T()*1/self.AS.rhomolar()*self.AS.first_partial_deriv(CoolProp.iP, CoolProp.iT, CoolProp.iDmolar)-self.AS.p()*self.AS.gas_constant()/self.AS.rhomolar())/(self.AS.gas_constant()*self.AS.T())**2\n",
    "        #print self.AS.T(), self.AS.p(), r\n",
    "        return r\n",
    "\n",
    "    def starting_direction(self):\n",
    "        \"\"\" Start searching directly up \"\"\"\n",
    "        return np.pi/2.0\n",
    "\n",
    "class JouleThomsonCurveTracer(AbstractCurveTracer):\n",
    "    def __init__(self, *args, **kwargs):\n",
    "        AbstractCurveTracer.__init__(self, *args, **kwargs)\n",
    "\n",
    "    def objective(self):\n",
    "        \"\"\" dZ/dT|p = 0 \"\"\"\n",
    "        dvdT__constp = -self.AS.first_partial_deriv(CoolProp.iDmolar, CoolProp.iT, CoolProp.iP)/self.AS.rhomolar()**2\n",
    "        r = self.AS.p()/(self.AS.gas_constant()*self.AS.T()**2)*(self.AS.T()*dvdT__constp - 1/self.AS.rhomolar())\n",
    "        #print self.AS.T(), self.AS.p(), r\n",
    "        return r\n",
    "\n",
    "    def starting_direction(self):\n",
    "        \"\"\" Start searching directly up \"\"\"\n",
    "        return np.pi/2.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "bb419a93",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-12T18:10:53.711700Z",
     "iopub.status.busy": "2024-12-12T18:10:53.711372Z",
     "iopub.status.idle": "2024-12-12T18:10:56.978887Z",
     "shell.execute_reply": "2024-12-12T18:10:56.978425Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "---- HEOS ----\n",
      "Ideal Curve\n",
      "871.9188660407749\n",
      "Saturation Curve\n",
      "Boyle Curve\n",
      "871.3231023164184\n",
      "solver_rho_Tp was unable to find a solution for T=   367.236, p=4.23194e+06, with guess value    7148.15 with error: The molar density of -534.989081 mol/m3 is below the minimum of 0.000000 mol/m3\n",
      "Joule Inversion Curve\n",
      "5203.0347638747335\n",
      "Joule-Thomson Curve\n",
      "1607.8131112921665\n",
      "f(a) and f(b) must have different signs\n",
      "---- SAFT-VR-Mie ----\n",
      "Ideal Curve\n",
      "869.1678675951697\n",
      "Boyle Curve\n",
      "868.5717695687255\n",
      "The function value at x=2.8449889669026227 is NaN; solver cannot continue.\n",
      "Joule Inversion Curve\n",
      "7532.324134784955\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Joule-Thomson Curve\n",
      "1639.8924107978214\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "---- PC-SAFT ----\n",
      "Ideal Curve\n",
      "937.290324467432\n",
      "Boyle Curve\n",
      "936.5094002217145\n",
      "The function value at x=2.8848878615386546 is NaN; solver cannot continue.\n",
      "Joule Inversion Curve\n",
      "Failed to converge after 50 iterations, value is 38232770.52660468.\n",
      "Joule-Thomson Curve\n",
      "1797.0614181657859\n"
     ]
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# And here is a block of code that actually does the calculations with the tracer,\n",
    "# with three different models for propane\n",
    "\n",
    "backend = 'HEOS'\n",
    "fluid = 'Propane'\n",
    "ASCP = CP.AbstractState(backend, fluid)\n",
    "\n",
    "ASteqpSAFTVRMie = teqpAbstractStateShim({'kind': 'SAFT-VR-Mie', 'model': {'names': [fluid]} })\n",
    "ASteqpPCSAFT = teqpAbstractStateShim({'kind': 'PCSAFT', 'model': {'names': [fluid]} })\n",
    "\n",
    "for AS,modelabbrv in [\n",
    "    (ASCP,'HEOS'),\n",
    "    (ASteqpSAFTVRMie,'SAFT-VR-Mie'),\n",
    "    (ASteqpPCSAFT,'PC-SAFT')\n",
    "    ]:\n",
    "    print(f'---- {modelabbrv} ----')\n",
    "\n",
    "    kwargs = dict(lw = 2)\n",
    "    for klass, label, p0, T0, color in [\n",
    "        (IdealCurveTracer, 'Ideal Curve', 1e5, 900, 'r'),\n",
    "        (BoyleCurveTracer, 'Boyle Curve', 1e5, 800, 'g'),\n",
    "        (JouleInversionCurveTracer, 'Joule Inversion Curve', 1e5, 1800, 'orange'),\n",
    "        (JouleThomsonCurveTracer, 'Joule-Thomson Curve', 1e5, 1800, 'cyan')\n",
    "    ]:\n",
    "        try:\n",
    "            print(label)\n",
    "            tracer = klass(AS=AS, p0=p0, T0=T0)\n",
    "            x,y = tracer.trace()\n",
    "            if modelabbrv == 'HEOS':\n",
    "                style = '-'\n",
    "            elif modelabbrv == 'PC-SAFT':\n",
    "                style = ':'\n",
    "            else:\n",
    "                style = '--'\n",
    "            plt.plot(x, y, style, label=f'{label} [{modelabbrv}]', color=color, **kwargs)\n",
    "\n",
    "            if modelabbrv == 'HEOS' and label == 'Ideal Curve':\n",
    "                print('Saturation Curve')\n",
    "                Tt = tracer.AS.keyed_output(CoolProp.iT_triple)\n",
    "                Tc = tracer.AS.keyed_output(CoolProp.iT_critical)\n",
    "                Ts = np.linspace(Tt, Tc - 1.e-6)\n",
    "                ps = CoolProp.CoolProp.PropsSI('P','T',Ts,'Q',0,backend + '::' + fluid)\n",
    "                plt.plot(Ts, ps, '-', label = 'Saturation Curve', **kwargs)\n",
    "            \n",
    "        except BaseException as BE:\n",
    "            print(BE)\n",
    "            pass         \n",
    "\n",
    "plt.yscale('log')\n",
    "plt.xscale('log')\n",
    "plt.xlabel('T (K)')\n",
    "plt.ylabel('p (Pa)')\n",
    "plt.ylim(100, 1e9)\n",
    "plt.legend(loc='best', fontsize=6)\n",
    "plt.savefig('ideal_curves.pdf')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
